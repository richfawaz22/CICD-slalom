
name: Main
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with: 
          node-version: "18.x"
      - name: Install dependencies
        run: npm install
      - name: Run test
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "richard-cicd"
          heroku_email: "richfawaz@gmail.com"
# #trying a few things here 
# name: Terraform-GitHub-Actions
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ] 
# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
# jobs:
#   build:
#     name: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
       
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1
      
#       - name: Terraform Init
#         id: init
#         run: terraform init
      
#       - name: Terraform Plan
#         id: plan
#         run: terraform plan
      
#       - name: Terraform Apply
#         id: apply
#         run: terraform apply --auto-approve
























# #Runs when a pull request is opened or merged on main only, this follows best DevOps practices and gitHub flow
# name: "Terraform"

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1

#       - name: Terraform Init
#         id: init
#         run: terraform init
      
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         run: terraform plan -no-color -input=false
#         continue-on-error: true

#       - uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#             <details><summary>Show Plan</summary>

#             \`\`\`\n
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })

#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false
