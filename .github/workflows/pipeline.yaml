name: "Terraform Deployment"
on:
  # Manual trigger
  workflow_dispatch:
  push:
    paths:
      - '*/**'
  pull_request:
    branches: [ main ]
defaults:
  run:
    shell: bash
jobs:
  terraform:
    name:   ${{matrix.runner}} - ${{ matrix.environment }}
    runs-on: [ '${{ matrix.runner }}']
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: test
             runner: ubuntu-latest
           - environment: prod
             runner: ubuntu-18.04
    env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_DEFAULT_REGION: us-east-2
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Linting Checkout
        uses: actions/checkout@v2
      - name: Terraform lint
        uses: devops-infra/action-tflint@v0.3 
      - name: Terraform Init
        id: init
        run: |
           rm -rf .terraform
           terraform init 
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars

  comment:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üëã Thanks for reporting!'
            })









# name: Main
# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:
# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js
#         uses: actions/setup-node@v2
#         with: 
#           node-version: "18.x"
#       - name: Install dependencies
#         run: npm install
#       - name: Run test
#         run: npm test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [build]
#     steps:
#       - uses: actions/checkout@v2
#       - uses: akhileshns/heroku-deploy@v3.12.12 
#         with:
#           heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#           heroku_app_name: "richard-cicd"
#           heroku_email: "richfawaz@gmail.com"
























# #Runs when a pull request is opened or merged on main only, this follows best DevOps practices and gitHub flow
# name: "Terraform"

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
      
#       - name: Linting Checkout
#         uses: actions/checkout@v2
#       - name: Terraform lint
#         uses: devops-infra/action-tflint@v0.3 
        
#       - name: Terraform Init
#         id: init
#         run: terraform init
      
#       - name: Linting Checkout
#         uses: actions/checkout@v2
#       - name: Terraform lint
#         uses: devops-infra/action-tflint@v0.3 
        

#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         run: terraform plan -no-color -input=false
#         continue-on-error: true

#       - uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#             <details><summary>Show Plan</summary>

#             \`\`\`\n
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })

#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false











# # # name: "Terraform Deployment"
# # # on:
# # #   # Manual trigger
# # #   workflow_dispatch:
# # #   push:
# # #     paths:
# # #       - '*/**'
# # #   pull_request:
# # #     branches: [ main ]
# # # defaults:
# # #   run:
# # #     shell: bash
# # # jobs:
# # #   terraform:
# # #     name:   ${{matrix.runner}} - ${{ matrix.environment }}
# # #     runs-on: [ '${{ matrix.runner }}']
# # #     strategy:
# # #       max-parallel: 1
# # #       matrix:
# # #          include:
# # #            - environment: test
# # #              runner: ubuntu-latest
# # #            - environment: prod
# # #              runner: ubuntu-
# # #     env:
# # #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# # #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# # #          AWS_DEFAULT_REGION: us-east-2
# # #     steps:
# # #       - uses: actions/checkout@v2
# # #       - uses: hashicorp/setup-terraform@v1
# # #         with:
# # #           terraform_wrapper: false
# # #       - name: Terraform Init
# # #         id: init
# # #         run: |
# # #            rm -rf .terraform
# # #            terraform init -backend-config=${{ matrix.environment }}/backend.tfvars -upgrade=true -no-color -input=false
# # #       - name: Terraform Plan
# # #         id: plan
# # #         run: |
# # #           terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
# # #       - name: Terraform Apply
# # #         if: github.ref == 'refs/heads/main'
# # #         id: apply
# # #         run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars

# # #     runs-on: ubuntu-latest
# # #     needs: terraform
# # #     if: github.event_name == 'pull_request'
# # #     steps:
# # #       - uses: actions/github-script@v5
# # #         with:
# # #           script: |
# # #             github.rest.issues.createComment({
# # #               issue_number: context.issue.number,
# # #               owner: context.repo.owner,
# # #               repo: context.repo.repo,
# # #               body: 'Thanks for the pull request'
# # #             })

# # #.



# # # name: Main
# # # on:
# # #   push:
# # #     branches: [ main ]
# # #   workflow_dispatch:
# # # jobs:
# # #   build:
# # #     runs-on: ubuntu-latest

# # #     steps:
# # #       - uses: actions/checkout@v2
# # #       - name: Use Node.js
# # #         uses: actions/setup-node@v2
# # #         with: 
# # #           node-version: "18.x"
# # #       - name: Install dependencies
# # #         run: npm install
# # #       - name: Run test
# # #         run: npm test

# # #   deploy:
# # #     runs-on: ubuntu-latest
# # #     needs: [build]
# # #     steps:
# # #       - uses: actions/checkout@v2
# # #       - uses: akhileshns/heroku-deploy@v3.12.12 
# # #         with:
# # #           heroku_api_key: ${{secrets.HEROKU_API_KEY}}
# # #           heroku_app_name: "richard-cicd"
# # #           heroku_email: "richfawaz@gmail.com"
























# # #Runs when a pull request is opened or merged on main only, this follows best DevOps practices and gitHub flow
# # name: "Terraform"

# # on:
# #   push:
# #     branches:
# #       - main
# #   pull_request:

# # jobs:
# #   terraform:
# #     name: "Terraform"
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v3

# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v1
      
# #       - name: Linting Checkout
# #         uses: actions/checkout@v2
# #       - name: Terraform lint
# #         uses: devops-infra/action-tflint@v0.3 
        
# #       - name: Terraform Init
# #         id: init
# #         run: terraform init
      
# #       - name: Linting Checkout
# #         uses: actions/checkout@v2
# #       - name: Terraform lint
# #         uses: devops-infra/action-tflint@v0.3 
        

# #       - name: Terraform Plan
# #         id: plan
# #         if: github.event_name == 'pull_request'
# #         run: terraform plan -no-color -input=false
# #         continue-on-error: true

# #       - uses: actions/github-script@v6
# #         if: github.event_name == 'pull_request'
# #         env:
# #           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
# #         with:
# #           github-token: ${{ secrets.GITHUB_TOKEN }}
# #           script: |
# #             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
# #             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
# #             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
# #             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

# #             <details><summary>Show Plan</summary>

# #             \`\`\`\n
# #             ${process.env.PLAN}
# #             \`\`\`

# #             </details>

# #             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

# #             github.rest.issues.createComment({
# #               issue_number: context.issue.number,
# #               owner: context.repo.owner,
# #               repo: context.repo.repo,
# #               body: output
# #             })

# #       - name: Terraform Plan Status
# #         if: steps.plan.outcome == 'failure'
# #         run: exit 1

# #       - name: Terraform Apply
# #         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
# #         run: terraform apply -auto-approve -input=false
